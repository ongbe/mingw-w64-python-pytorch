diff -urN -x '*.orig' '-x*.rej' pytorch-1.4.0.orig/caffe2/core/module.cc pytorch-1.4.0/caffe2/core/module.cc
--- pytorch-1.4.0.orig/caffe2/core/module.cc	2020-02-04 20:58:18.833000000 +0800
+++ pytorch-1.4.0/caffe2/core/module.cc	2020-02-06 14:16:54.046000000 +0800
@@ -1,7 +1,7 @@
 #include "caffe2/core/logging.h"
 #include "caffe2/core/module.h"
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <dlfcn.h>
 #endif
 
@@ -38,7 +38,7 @@
  return (modules.find(name) != modules.end());
 }
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 
 void LoadModule(const string& name, const string& filename) {
   CAFFE_ENFORCE(!HasModule(name),
@@ -115,7 +115,7 @@
   }
 }
 
-#endif // _MSC_VER
+#endif // _WIN32
 
 }  // namespace caffe2
 
diff -urN -x '*.orig' '-x*.rej' pytorch-1.4.0.orig/caffe2/distributed/file_store_handler.cc pytorch-1.4.0/caffe2/distributed/file_store_handler.cc
--- pytorch-1.4.0.orig/caffe2/distributed/file_store_handler.cc	2020-02-04 20:58:19.136000000 +0800
+++ pytorch-1.4.0/caffe2/distributed/file_store_handler.cc	2020-02-06 14:16:54.060000000 +0800
@@ -12,7 +12,7 @@
 #include <iostream>
 #include <thread>
 
-#if defined(_MSC_VER)
+#if defined(_WIN32)
 #include <direct.h> // for _mkdir
 #endif
 
@@ -43,11 +43,11 @@
   if (!prefix.empty()) {
     basePath_ = basePath_ + "/" + encodeName(prefix);
   }
-#if defined(_MSC_VER)
+#if defined(_WIN32)
   auto ret = _mkdir(basePath_.c_str());
 #else
   auto ret = mkdir(basePath_.c_str(), 0777);
-#endif // defined(_MSC_VER)
+#endif // defined(_WIN32)
   if (ret == -1) {
     CHECK_EQ(errno, EEXIST) << "mkdir: " << strerror(errno);
   }
@@ -56,7 +56,7 @@
 FileStoreHandler::~FileStoreHandler() {}
 
 std::string FileStoreHandler::realPath(const std::string& path) {
-#if defined(_MSC_VER)
+#if defined(_WIN32)
   std::array<char, _MAX_PATH> buf;
   auto ret = _fullpath(buf.data(), path.c_str(), buf.size());
 #else
diff -urN -x '*.orig' '-x*.rej' pytorch-1.4.0.orig/caffe2/perfkernels/typed_axpy_avx.cc pytorch-1.4.0/caffe2/perfkernels/typed_axpy_avx.cc
--- pytorch-1.4.0.orig/caffe2/perfkernels/typed_axpy_avx.cc	2020-02-04 20:58:21.192000000 +0800
+++ pytorch-1.4.0/caffe2/perfkernels/typed_axpy_avx.cc	2020-02-06 14:16:54.067000000 +0800
@@ -33,7 +33,7 @@
     float* y) {
   // if x does not start at the 16 byte boundary, we will process the first few.
   // before we get to a real one.
-  while ((reinterpret_cast<unsigned long>(x) % 16) && N) {
+  while ((reinterpret_cast<unsigned long long>(x) % 16) && N) {
     *(y++) += _cvtsh_ss((*(x++)).x) * a;
     --N;
   }
diff -urN -x '*.orig' '-x*.rej' pytorch-1.4.0.orig/caffe2/perfkernels/typed_axpy_avx2.cc pytorch-1.4.0/caffe2/perfkernels/typed_axpy_avx2.cc
--- pytorch-1.4.0.orig/caffe2/perfkernels/typed_axpy_avx2.cc	2020-02-04 20:58:21.193000000 +0800
+++ pytorch-1.4.0/caffe2/perfkernels/typed_axpy_avx2.cc	2020-02-06 14:16:54.075000000 +0800
@@ -32,7 +32,7 @@
     float* y) {
   // if x does not start at the 16 byte boundary, we will process the first few.
   // before we get to a real one.
-  while ((reinterpret_cast<unsigned long>(x) % 16) && N) {
+  while ((reinterpret_cast<unsigned long long>(x) % 16) && N) {
     *(y++) += _cvtsh_ss((*(x++)).x) * a;
     --N;
   }
@@ -67,7 +67,7 @@
     float* y) {
   // if x does not start at the 16 byte boundary, we will process the first few.
   // before we get to a real one.
-  while ((reinterpret_cast<unsigned long>(x) % 16) && N) {
+  while ((reinterpret_cast<unsigned long long>(x) % 16) && N) {
     *(y++) += static_cast<float>(*(x++)) * a;
     --N;
   }
diff -urN -x '*.orig' '-x*.rej' pytorch-1.4.0.orig/caffe2/utils/threadpool/WorkersPool.h pytorch-1.4.0/caffe2/utils/threadpool/WorkersPool.h
--- pytorch-1.4.0.orig/caffe2/utils/threadpool/WorkersPool.h	2020-02-04 20:58:29.150000000 +0800
+++ pytorch-1.4.0/caffe2/utils/threadpool/WorkersPool.h	2020-02-06 14:16:54.081000000 +0800
@@ -7,7 +7,7 @@
 #include "caffe2/core/common.h"
 #include "caffe2/core/logging.h"
 
-#if defined(_MSC_VER)
+#if defined(_WIN32)
 #include <intrin.h>
 #endif
 
@@ -36,7 +36,7 @@
 
 #if defined(__ANDROID__)
     p = memalign(kGEMMLOWPCacheLineSize, sizeof(T));
-#elif defined(_MSC_VER)
+#elif defined(_WIN32)
     p = _aligned_malloc(sizeof(T), kGEMMLOWPCacheLineSize);
 #else
     posix_memalign((void**)&p, kGEMMLOWPCacheLineSize, sizeof(T));
@@ -53,7 +53,7 @@
   static void release(T* p) {
     if (p) {
       p->~T();
-#if defined(_MSC_VER)
+#if defined(_WIN32)
       _aligned_free((void*)p);
 #else
       free((void*)p);
